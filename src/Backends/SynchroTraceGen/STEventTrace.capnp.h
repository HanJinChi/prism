// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: STEventTrace.capnp

#ifndef CAPNP_INCLUDED_9274197a8c1bd9a8_
#define CAPNP_INCLUDED_9274197a8c1bd9a8_

#include <capnp/generated-header-support.h>

#if CAPNP_VERSION != 5003
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(87ac4540ededb107);
CAPNP_DECLARE_SCHEMA(d4b3f56eb076ba25);
CAPNP_DECLARE_SCHEMA(c1ef9fb19b1f0292);
CAPNP_DECLARE_SCHEMA(b01b7b96c008717c);
enum class SyncType_b01b7b96c008717c: uint16_t {
  SPAWN,
  JOIN,
  BARRIER,
  SYNC,
  LOCK,
  UNLOCK,
  COND_WAIT,
  COND_SIGNAL,
  COND_BROADCAST,
  SPIN_LOCK,
  SPIN_UNLOCK,
};
CAPNP_DECLARE_ENUM(SyncType, b01b7b96c008717c);
CAPNP_DECLARE_SCHEMA(8c582edbb56ff4d1);
CAPNP_DECLARE_SCHEMA(a7796f360e02eea2);
CAPNP_DECLARE_SCHEMA(94f66f91a5feee75);
CAPNP_DECLARE_SCHEMA(b6176ac92d133b7e);
CAPNP_DECLARE_SCHEMA(bac698225ac8c0d0);

}  // namespace schemas
}  // namespace capnp


struct Event {
  Event() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    COMP,
    COMM,
    SYNC,
    MARKER,
  };
  struct AddrRange;
  struct CommEdge;
  typedef ::capnp::schemas::SyncType_b01b7b96c008717c SyncType;

  struct Comp;
  struct Comm;
  struct Sync;
  struct Marker;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(87ac4540ededb107, 3, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Event::AddrRange {
  AddrRange() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d4b3f56eb076ba25, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Event::CommEdge {
  CommEdge() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c1ef9fb19b1f0292, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Event::Comp {
  Comp() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8c582edbb56ff4d1, 3, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Event::Comm {
  Comm() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a7796f360e02eea2, 3, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Event::Sync {
  Sync() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(94f66f91a5feee75, 3, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Event::Marker {
  Marker() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b6176ac92d133b7e, 3, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct EventStream {
  EventStream() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bac698225ac8c0d0, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class Event::Reader {
public:
  typedef Event Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isComp() const;
  inline Comp::Reader getComp() const;

  inline bool isComm() const;
  inline Comm::Reader getComm() const;

  inline bool isSync() const;
  inline Sync::Reader getSync() const;

  inline bool isMarker() const;
  inline Marker::Reader getMarker() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Event::Builder {
public:
  typedef Event Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isComp();
  inline Comp::Builder getComp();
  inline Comp::Builder initComp();

  inline bool isComm();
  inline Comm::Builder getComm();
  inline Comm::Builder initComm();

  inline bool isSync();
  inline Sync::Builder getSync();
  inline Sync::Builder initSync();

  inline bool isMarker();
  inline Marker::Builder getMarker();
  inline Marker::Builder initMarker();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Event::Pipeline {
public:
  typedef Event Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Event::AddrRange::Reader {
public:
  typedef AddrRange Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getStart() const;

  inline  ::uint64_t getEnd() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Event::AddrRange::Builder {
public:
  typedef AddrRange Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getStart();
  inline void setStart( ::uint64_t value);

  inline  ::uint64_t getEnd();
  inline void setEnd( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Event::AddrRange::Pipeline {
public:
  typedef AddrRange Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Event::CommEdge::Reader {
public:
  typedef CommEdge Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getProducerThread() const;

  inline  ::uint32_t getProducerEvent() const;

  inline bool hasAddrs() const;
  inline  ::capnp::List< ::Event::AddrRange>::Reader getAddrs() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Event::CommEdge::Builder {
public:
  typedef CommEdge Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getProducerThread();
  inline void setProducerThread( ::uint16_t value);

  inline  ::uint32_t getProducerEvent();
  inline void setProducerEvent( ::uint32_t value);

  inline bool hasAddrs();
  inline  ::capnp::List< ::Event::AddrRange>::Builder getAddrs();
  inline void setAddrs( ::capnp::List< ::Event::AddrRange>::Reader value);
  inline  ::capnp::List< ::Event::AddrRange>::Builder initAddrs(unsigned int size);
  inline void adoptAddrs(::capnp::Orphan< ::capnp::List< ::Event::AddrRange>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Event::AddrRange>> disownAddrs();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Event::CommEdge::Pipeline {
public:
  typedef CommEdge Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Event::Comp::Reader {
public:
  typedef Comp Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getIops() const;

  inline  ::uint16_t getFlops() const;

  inline  ::uint16_t getWrites() const;

  inline  ::uint16_t getReads() const;

  inline bool hasWriteAddrs() const;
  inline  ::capnp::List< ::Event::AddrRange>::Reader getWriteAddrs() const;

  inline bool hasReadAddrs() const;
  inline  ::capnp::List< ::Event::AddrRange>::Reader getReadAddrs() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Event::Comp::Builder {
public:
  typedef Comp Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getIops();
  inline void setIops( ::uint16_t value);

  inline  ::uint16_t getFlops();
  inline void setFlops( ::uint16_t value);

  inline  ::uint16_t getWrites();
  inline void setWrites( ::uint16_t value);

  inline  ::uint16_t getReads();
  inline void setReads( ::uint16_t value);

  inline bool hasWriteAddrs();
  inline  ::capnp::List< ::Event::AddrRange>::Builder getWriteAddrs();
  inline void setWriteAddrs( ::capnp::List< ::Event::AddrRange>::Reader value);
  inline  ::capnp::List< ::Event::AddrRange>::Builder initWriteAddrs(unsigned int size);
  inline void adoptWriteAddrs(::capnp::Orphan< ::capnp::List< ::Event::AddrRange>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Event::AddrRange>> disownWriteAddrs();

  inline bool hasReadAddrs();
  inline  ::capnp::List< ::Event::AddrRange>::Builder getReadAddrs();
  inline void setReadAddrs( ::capnp::List< ::Event::AddrRange>::Reader value);
  inline  ::capnp::List< ::Event::AddrRange>::Builder initReadAddrs(unsigned int size);
  inline void adoptReadAddrs(::capnp::Orphan< ::capnp::List< ::Event::AddrRange>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Event::AddrRange>> disownReadAddrs();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Event::Comp::Pipeline {
public:
  typedef Comp Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Event::Comm::Reader {
public:
  typedef Comm Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasEdges() const;
  inline  ::capnp::List< ::Event::CommEdge>::Reader getEdges() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Event::Comm::Builder {
public:
  typedef Comm Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasEdges();
  inline  ::capnp::List< ::Event::CommEdge>::Builder getEdges();
  inline void setEdges( ::capnp::List< ::Event::CommEdge>::Reader value);
  inline  ::capnp::List< ::Event::CommEdge>::Builder initEdges(unsigned int size);
  inline void adoptEdges(::capnp::Orphan< ::capnp::List< ::Event::CommEdge>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Event::CommEdge>> disownEdges();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Event::Comm::Pipeline {
public:
  typedef Comm Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Event::Sync::Reader {
public:
  typedef Sync Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::Event::SyncType getType() const;

  inline  ::uint64_t getId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Event::Sync::Builder {
public:
  typedef Sync Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::Event::SyncType getType();
  inline void setType( ::Event::SyncType value);

  inline  ::uint64_t getId();
  inline void setId( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Event::Sync::Pipeline {
public:
  typedef Sync Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Event::Marker::Reader {
public:
  typedef Marker Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getCount() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Event::Marker::Builder {
public:
  typedef Marker Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getCount();
  inline void setCount( ::uint16_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Event::Marker::Pipeline {
public:
  typedef Marker Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class EventStream::Reader {
public:
  typedef EventStream Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasEvents() const;
  inline  ::capnp::List< ::Event>::Reader getEvents() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class EventStream::Builder {
public:
  typedef EventStream Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasEvents();
  inline  ::capnp::List< ::Event>::Builder getEvents();
  inline void setEvents( ::capnp::List< ::Event>::Reader value);
  inline  ::capnp::List< ::Event>::Builder initEvents(unsigned int size);
  inline void adoptEvents(::capnp::Orphan< ::capnp::List< ::Event>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Event>> disownEvents();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class EventStream::Pipeline {
public:
  typedef EventStream Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::Event::Which Event::Reader::which() const {
  return _reader.getDataField<Which>(4 * ::capnp::ELEMENTS);
}
inline  ::Event::Which Event::Builder::which() {
  return _builder.getDataField<Which>(4 * ::capnp::ELEMENTS);
}

inline bool Event::Reader::isComp() const {
  return which() == Event::COMP;
}
inline bool Event::Builder::isComp() {
  return which() == Event::COMP;
}
inline Event::Comp::Reader Event::Reader::getComp() const {
  KJ_IREQUIRE(which() == Event::COMP,
              "Must check which() before get()ing a union member.");
  return Event::Comp::Reader(_reader);
}
inline Event::Comp::Builder Event::Builder::getComp() {
  KJ_IREQUIRE(which() == Event::COMP,
              "Must check which() before get()ing a union member.");
  return Event::Comp::Builder(_builder);
}
inline Event::Comp::Builder Event::Builder::initComp() {
  _builder.setDataField<Event::Which>(
      4 * ::capnp::ELEMENTS, Event::COMP);
  _builder.setDataField< ::uint16_t>(0 * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint16_t>(1 * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint16_t>(2 * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint16_t>(3 * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(0 * ::capnp::POINTERS).clear();
  _builder.getPointerField(1 * ::capnp::POINTERS).clear();
  return Event::Comp::Builder(_builder);
}
inline bool Event::Reader::isComm() const {
  return which() == Event::COMM;
}
inline bool Event::Builder::isComm() {
  return which() == Event::COMM;
}
inline Event::Comm::Reader Event::Reader::getComm() const {
  KJ_IREQUIRE(which() == Event::COMM,
              "Must check which() before get()ing a union member.");
  return Event::Comm::Reader(_reader);
}
inline Event::Comm::Builder Event::Builder::getComm() {
  KJ_IREQUIRE(which() == Event::COMM,
              "Must check which() before get()ing a union member.");
  return Event::Comm::Builder(_builder);
}
inline Event::Comm::Builder Event::Builder::initComm() {
  _builder.setDataField<Event::Which>(
      4 * ::capnp::ELEMENTS, Event::COMM);
  _builder.getPointerField(0 * ::capnp::POINTERS).clear();
  return Event::Comm::Builder(_builder);
}
inline bool Event::Reader::isSync() const {
  return which() == Event::SYNC;
}
inline bool Event::Builder::isSync() {
  return which() == Event::SYNC;
}
inline Event::Sync::Reader Event::Reader::getSync() const {
  KJ_IREQUIRE(which() == Event::SYNC,
              "Must check which() before get()ing a union member.");
  return Event::Sync::Reader(_reader);
}
inline Event::Sync::Builder Event::Builder::getSync() {
  KJ_IREQUIRE(which() == Event::SYNC,
              "Must check which() before get()ing a union member.");
  return Event::Sync::Builder(_builder);
}
inline Event::Sync::Builder Event::Builder::initSync() {
  _builder.setDataField<Event::Which>(
      4 * ::capnp::ELEMENTS, Event::SYNC);
  _builder.setDataField< ::uint16_t>(0 * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint64_t>(2 * ::capnp::ELEMENTS, 0);
  return Event::Sync::Builder(_builder);
}
inline bool Event::Reader::isMarker() const {
  return which() == Event::MARKER;
}
inline bool Event::Builder::isMarker() {
  return which() == Event::MARKER;
}
inline Event::Marker::Reader Event::Reader::getMarker() const {
  KJ_IREQUIRE(which() == Event::MARKER,
              "Must check which() before get()ing a union member.");
  return Event::Marker::Reader(_reader);
}
inline Event::Marker::Builder Event::Builder::getMarker() {
  KJ_IREQUIRE(which() == Event::MARKER,
              "Must check which() before get()ing a union member.");
  return Event::Marker::Builder(_builder);
}
inline Event::Marker::Builder Event::Builder::initMarker() {
  _builder.setDataField<Event::Which>(
      4 * ::capnp::ELEMENTS, Event::MARKER);
  _builder.setDataField< ::uint16_t>(0 * ::capnp::ELEMENTS, 0);
  return Event::Marker::Builder(_builder);
}
inline  ::uint64_t Event::AddrRange::Reader::getStart() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Event::AddrRange::Builder::getStart() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Event::AddrRange::Builder::setStart( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Event::AddrRange::Reader::getEnd() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Event::AddrRange::Builder::getEnd() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Event::AddrRange::Builder::setEnd( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t Event::CommEdge::Reader::getProducerThread() const {
  return _reader.getDataField< ::uint16_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint16_t Event::CommEdge::Builder::getProducerThread() {
  return _builder.getDataField< ::uint16_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Event::CommEdge::Builder::setProducerThread( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Event::CommEdge::Reader::getProducerEvent() const {
  return _reader.getDataField< ::uint32_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Event::CommEdge::Builder::getProducerEvent() {
  return _builder.getDataField< ::uint32_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Event::CommEdge::Builder::setProducerEvent( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline bool Event::CommEdge::Reader::hasAddrs() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Event::CommEdge::Builder::hasAddrs() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Event::AddrRange>::Reader Event::CommEdge::Reader::getAddrs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Event::AddrRange>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Event::AddrRange>::Builder Event::CommEdge::Builder::getAddrs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Event::AddrRange>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Event::CommEdge::Builder::setAddrs( ::capnp::List< ::Event::AddrRange>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Event::AddrRange>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Event::AddrRange>::Builder Event::CommEdge::Builder::initAddrs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Event::AddrRange>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Event::CommEdge::Builder::adoptAddrs(
    ::capnp::Orphan< ::capnp::List< ::Event::AddrRange>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Event::AddrRange>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Event::AddrRange>> Event::CommEdge::Builder::disownAddrs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Event::AddrRange>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::uint16_t Event::Comp::Reader::getIops() const {
  return _reader.getDataField< ::uint16_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint16_t Event::Comp::Builder::getIops() {
  return _builder.getDataField< ::uint16_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Event::Comp::Builder::setIops( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t Event::Comp::Reader::getFlops() const {
  return _reader.getDataField< ::uint16_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint16_t Event::Comp::Builder::getFlops() {
  return _builder.getDataField< ::uint16_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Event::Comp::Builder::setFlops( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t Event::Comp::Reader::getWrites() const {
  return _reader.getDataField< ::uint16_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint16_t Event::Comp::Builder::getWrites() {
  return _builder.getDataField< ::uint16_t>(
      2 * ::capnp::ELEMENTS);
}
inline void Event::Comp::Builder::setWrites( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t Event::Comp::Reader::getReads() const {
  return _reader.getDataField< ::uint16_t>(
      3 * ::capnp::ELEMENTS);
}

inline  ::uint16_t Event::Comp::Builder::getReads() {
  return _builder.getDataField< ::uint16_t>(
      3 * ::capnp::ELEMENTS);
}
inline void Event::Comp::Builder::setReads( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      3 * ::capnp::ELEMENTS, value);
}

inline bool Event::Comp::Reader::hasWriteAddrs() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Event::Comp::Builder::hasWriteAddrs() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Event::AddrRange>::Reader Event::Comp::Reader::getWriteAddrs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Event::AddrRange>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Event::AddrRange>::Builder Event::Comp::Builder::getWriteAddrs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Event::AddrRange>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Event::Comp::Builder::setWriteAddrs( ::capnp::List< ::Event::AddrRange>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Event::AddrRange>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Event::AddrRange>::Builder Event::Comp::Builder::initWriteAddrs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Event::AddrRange>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Event::Comp::Builder::adoptWriteAddrs(
    ::capnp::Orphan< ::capnp::List< ::Event::AddrRange>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Event::AddrRange>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Event::AddrRange>> Event::Comp::Builder::disownWriteAddrs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Event::AddrRange>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Event::Comp::Reader::hasReadAddrs() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Event::Comp::Builder::hasReadAddrs() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Event::AddrRange>::Reader Event::Comp::Reader::getReadAddrs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Event::AddrRange>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Event::AddrRange>::Builder Event::Comp::Builder::getReadAddrs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Event::AddrRange>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Event::Comp::Builder::setReadAddrs( ::capnp::List< ::Event::AddrRange>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Event::AddrRange>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Event::AddrRange>::Builder Event::Comp::Builder::initReadAddrs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Event::AddrRange>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void Event::Comp::Builder::adoptReadAddrs(
    ::capnp::Orphan< ::capnp::List< ::Event::AddrRange>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Event::AddrRange>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Event::AddrRange>> Event::Comp::Builder::disownReadAddrs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Event::AddrRange>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool Event::Comm::Reader::hasEdges() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Event::Comm::Builder::hasEdges() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Event::CommEdge>::Reader Event::Comm::Reader::getEdges() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Event::CommEdge>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Event::CommEdge>::Builder Event::Comm::Builder::getEdges() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Event::CommEdge>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Event::Comm::Builder::setEdges( ::capnp::List< ::Event::CommEdge>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Event::CommEdge>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Event::CommEdge>::Builder Event::Comm::Builder::initEdges(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Event::CommEdge>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Event::Comm::Builder::adoptEdges(
    ::capnp::Orphan< ::capnp::List< ::Event::CommEdge>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Event::CommEdge>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Event::CommEdge>> Event::Comm::Builder::disownEdges() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Event::CommEdge>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::Event::SyncType Event::Sync::Reader::getType() const {
  return _reader.getDataField< ::Event::SyncType>(
      0 * ::capnp::ELEMENTS);
}

inline  ::Event::SyncType Event::Sync::Builder::getType() {
  return _builder.getDataField< ::Event::SyncType>(
      0 * ::capnp::ELEMENTS);
}
inline void Event::Sync::Builder::setType( ::Event::SyncType value) {
  _builder.setDataField< ::Event::SyncType>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Event::Sync::Reader::getId() const {
  return _reader.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint64_t Event::Sync::Builder::getId() {
  return _builder.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}
inline void Event::Sync::Builder::setId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t Event::Marker::Reader::getCount() const {
  return _reader.getDataField< ::uint16_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint16_t Event::Marker::Builder::getCount() {
  return _builder.getDataField< ::uint16_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Event::Marker::Builder::setCount( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool EventStream::Reader::hasEvents() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool EventStream::Builder::hasEvents() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Event>::Reader EventStream::Reader::getEvents() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Event>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Event>::Builder EventStream::Builder::getEvents() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Event>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void EventStream::Builder::setEvents( ::capnp::List< ::Event>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Event>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Event>::Builder EventStream::Builder::initEvents(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Event>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void EventStream::Builder::adoptEvents(
    ::capnp::Orphan< ::capnp::List< ::Event>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Event>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Event>> EventStream::Builder::disownEvents() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Event>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}


#endif  // CAPNP_INCLUDED_9274197a8c1bd9a8_
