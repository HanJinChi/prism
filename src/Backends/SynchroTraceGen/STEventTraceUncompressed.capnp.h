// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: STEventTraceUncompressed.capnp

#ifndef CAPNP_INCLUDED_b9c6524d44427f77_
#define CAPNP_INCLUDED_b9c6524d44427f77_

#include <capnp/generated-header-support.h>

#if CAPNP_VERSION != 6001
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(e8add7b262110ea6);
CAPNP_DECLARE_SCHEMA(cafa57e6b5bbbc84);
CAPNP_DECLARE_SCHEMA(b5263a4e050ee39d);
enum class SyncType_b5263a4e050ee39d: uint16_t {
  SPAWN,
  JOIN,
  BARRIER,
  SYNC,
  LOCK,
  UNLOCK,
  COND_WAIT,
  COND_SIGNAL,
  COND_BROADCAST,
  SPIN_LOCK,
  SPIN_UNLOCK,
};
CAPNP_DECLARE_ENUM(SyncType, b5263a4e050ee39d);
CAPNP_DECLARE_SCHEMA(9d571ba8c8e8b949);
enum class MemType_9d571ba8c8e8b949: uint16_t {
  NONE,
  READ,
  WRITE,
};
CAPNP_DECLARE_ENUM(MemType, 9d571ba8c8e8b949);
CAPNP_DECLARE_SCHEMA(f898e2aa0b98c862);
CAPNP_DECLARE_SCHEMA(cea4422c054b82ae);
CAPNP_DECLARE_SCHEMA(f2caf87d6a7e9c4c);
CAPNP_DECLARE_SCHEMA(b4799e0eca973d32);

}  // namespace schemas
}  // namespace capnp


struct EventStreamUncompressed {
  EventStreamUncompressed() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Event;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e8add7b262110ea6, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct EventStreamUncompressed::Event {
  Event() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    COMP,
    COMM,
    SYNC,
    MARKER,
  };
  typedef ::capnp::schemas::SyncType_b5263a4e050ee39d SyncType;

  typedef ::capnp::schemas::MemType_9d571ba8c8e8b949 MemType;

  struct Comp;
  struct Comm;
  struct Sync;
  struct Marker;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cafa57e6b5bbbc84, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct EventStreamUncompressed::Event::Comp {
  Comp() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f898e2aa0b98c862, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct EventStreamUncompressed::Event::Comm {
  Comm() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cea4422c054b82ae, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct EventStreamUncompressed::Event::Sync {
  Sync() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f2caf87d6a7e9c4c, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct EventStreamUncompressed::Event::Marker {
  Marker() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b4799e0eca973d32, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class EventStreamUncompressed::Reader {
public:
  typedef EventStreamUncompressed Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasEvents() const;
  inline  ::capnp::List< ::EventStreamUncompressed::Event>::Reader getEvents() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class EventStreamUncompressed::Builder {
public:
  typedef EventStreamUncompressed Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasEvents();
  inline  ::capnp::List< ::EventStreamUncompressed::Event>::Builder getEvents();
  inline void setEvents( ::capnp::List< ::EventStreamUncompressed::Event>::Reader value);
  inline  ::capnp::List< ::EventStreamUncompressed::Event>::Builder initEvents(unsigned int size);
  inline void adoptEvents(::capnp::Orphan< ::capnp::List< ::EventStreamUncompressed::Event>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::EventStreamUncompressed::Event>> disownEvents();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class EventStreamUncompressed::Pipeline {
public:
  typedef EventStreamUncompressed Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class EventStreamUncompressed::Event::Reader {
public:
  typedef Event Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isComp() const;
  inline typename Comp::Reader getComp() const;

  inline bool isComm() const;
  inline typename Comm::Reader getComm() const;

  inline bool isSync() const;
  inline typename Sync::Reader getSync() const;

  inline bool isMarker() const;
  inline typename Marker::Reader getMarker() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class EventStreamUncompressed::Event::Builder {
public:
  typedef Event Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isComp();
  inline typename Comp::Builder getComp();
  inline typename Comp::Builder initComp();

  inline bool isComm();
  inline typename Comm::Builder getComm();
  inline typename Comm::Builder initComm();

  inline bool isSync();
  inline typename Sync::Builder getSync();
  inline typename Sync::Builder initSync();

  inline bool isMarker();
  inline typename Marker::Builder getMarker();
  inline typename Marker::Builder initMarker();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class EventStreamUncompressed::Event::Pipeline {
public:
  typedef Event Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class EventStreamUncompressed::Event::Comp::Reader {
public:
  typedef Comp Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getIops() const;

  inline  ::uint16_t getFlops() const;

  inline  ::EventStreamUncompressed::Event::MemType getMem() const;

  inline  ::uint64_t getStartAddr() const;

  inline  ::uint64_t getEndAddr() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class EventStreamUncompressed::Event::Comp::Builder {
public:
  typedef Comp Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getIops();
  inline void setIops( ::uint16_t value);

  inline  ::uint16_t getFlops();
  inline void setFlops( ::uint16_t value);

  inline  ::EventStreamUncompressed::Event::MemType getMem();
  inline void setMem( ::EventStreamUncompressed::Event::MemType value);

  inline  ::uint64_t getStartAddr();
  inline void setStartAddr( ::uint64_t value);

  inline  ::uint64_t getEndAddr();
  inline void setEndAddr( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class EventStreamUncompressed::Event::Comp::Pipeline {
public:
  typedef Comp Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class EventStreamUncompressed::Event::Comm::Reader {
public:
  typedef Comm Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getProducerThread() const;

  inline  ::uint32_t getProducerEvent() const;

  inline  ::uint64_t getStartAddr() const;

  inline  ::uint64_t getEndAddr() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class EventStreamUncompressed::Event::Comm::Builder {
public:
  typedef Comm Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getProducerThread();
  inline void setProducerThread( ::uint16_t value);

  inline  ::uint32_t getProducerEvent();
  inline void setProducerEvent( ::uint32_t value);

  inline  ::uint64_t getStartAddr();
  inline void setStartAddr( ::uint64_t value);

  inline  ::uint64_t getEndAddr();
  inline void setEndAddr( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class EventStreamUncompressed::Event::Comm::Pipeline {
public:
  typedef Comm Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class EventStreamUncompressed::Event::Sync::Reader {
public:
  typedef Sync Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::EventStreamUncompressed::Event::SyncType getType() const;

  inline  ::uint64_t getId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class EventStreamUncompressed::Event::Sync::Builder {
public:
  typedef Sync Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::EventStreamUncompressed::Event::SyncType getType();
  inline void setType( ::EventStreamUncompressed::Event::SyncType value);

  inline  ::uint64_t getId();
  inline void setId( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class EventStreamUncompressed::Event::Sync::Pipeline {
public:
  typedef Sync Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class EventStreamUncompressed::Event::Marker::Reader {
public:
  typedef Marker Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getCount() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class EventStreamUncompressed::Event::Marker::Builder {
public:
  typedef Marker Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getCount();
  inline void setCount( ::uint16_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class EventStreamUncompressed::Event::Marker::Pipeline {
public:
  typedef Marker Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool EventStreamUncompressed::Reader::hasEvents() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool EventStreamUncompressed::Builder::hasEvents() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::EventStreamUncompressed::Event>::Reader EventStreamUncompressed::Reader::getEvents() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::EventStreamUncompressed::Event>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::EventStreamUncompressed::Event>::Builder EventStreamUncompressed::Builder::getEvents() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::EventStreamUncompressed::Event>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void EventStreamUncompressed::Builder::setEvents( ::capnp::List< ::EventStreamUncompressed::Event>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::EventStreamUncompressed::Event>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::EventStreamUncompressed::Event>::Builder EventStreamUncompressed::Builder::initEvents(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::EventStreamUncompressed::Event>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void EventStreamUncompressed::Builder::adoptEvents(
    ::capnp::Orphan< ::capnp::List< ::EventStreamUncompressed::Event>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::EventStreamUncompressed::Event>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::EventStreamUncompressed::Event>> EventStreamUncompressed::Builder::disownEvents() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::EventStreamUncompressed::Event>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::EventStreamUncompressed::Event::Which EventStreamUncompressed::Event::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline  ::EventStreamUncompressed::Event::Which EventStreamUncompressed::Event::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline bool EventStreamUncompressed::Event::Reader::isComp() const {
  return which() == EventStreamUncompressed::Event::COMP;
}
inline bool EventStreamUncompressed::Event::Builder::isComp() {
  return which() == EventStreamUncompressed::Event::COMP;
}
inline typename EventStreamUncompressed::Event::Comp::Reader EventStreamUncompressed::Event::Reader::getComp() const {
  KJ_IREQUIRE((which() == EventStreamUncompressed::Event::COMP),
              "Must check which() before get()ing a union member.");
  return typename EventStreamUncompressed::Event::Comp::Reader(_reader);
}
inline typename EventStreamUncompressed::Event::Comp::Builder EventStreamUncompressed::Event::Builder::getComp() {
  KJ_IREQUIRE((which() == EventStreamUncompressed::Event::COMP),
              "Must check which() before get()ing a union member.");
  return typename EventStreamUncompressed::Event::Comp::Builder(_builder);
}
inline typename EventStreamUncompressed::Event::Comp::Builder EventStreamUncompressed::Event::Builder::initComp() {
  _builder.setDataField<EventStreamUncompressed::Event::Which>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, EventStreamUncompressed::Event::COMP);
  _builder.setDataField< ::uint16_t>(::capnp::bounded<0>() * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint16_t>(::capnp::bounded<1>() * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint16_t>(::capnp::bounded<2>() * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint64_t>(::capnp::bounded<1>() * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint64_t>(::capnp::bounded<2>() * ::capnp::ELEMENTS, 0);
  return typename EventStreamUncompressed::Event::Comp::Builder(_builder);
}
inline bool EventStreamUncompressed::Event::Reader::isComm() const {
  return which() == EventStreamUncompressed::Event::COMM;
}
inline bool EventStreamUncompressed::Event::Builder::isComm() {
  return which() == EventStreamUncompressed::Event::COMM;
}
inline typename EventStreamUncompressed::Event::Comm::Reader EventStreamUncompressed::Event::Reader::getComm() const {
  KJ_IREQUIRE((which() == EventStreamUncompressed::Event::COMM),
              "Must check which() before get()ing a union member.");
  return typename EventStreamUncompressed::Event::Comm::Reader(_reader);
}
inline typename EventStreamUncompressed::Event::Comm::Builder EventStreamUncompressed::Event::Builder::getComm() {
  KJ_IREQUIRE((which() == EventStreamUncompressed::Event::COMM),
              "Must check which() before get()ing a union member.");
  return typename EventStreamUncompressed::Event::Comm::Builder(_builder);
}
inline typename EventStreamUncompressed::Event::Comm::Builder EventStreamUncompressed::Event::Builder::initComm() {
  _builder.setDataField<EventStreamUncompressed::Event::Which>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, EventStreamUncompressed::Event::COMM);
  _builder.setDataField< ::uint16_t>(::capnp::bounded<0>() * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint32_t>(::capnp::bounded<1>() * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint64_t>(::capnp::bounded<1>() * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint64_t>(::capnp::bounded<2>() * ::capnp::ELEMENTS, 0);
  return typename EventStreamUncompressed::Event::Comm::Builder(_builder);
}
inline bool EventStreamUncompressed::Event::Reader::isSync() const {
  return which() == EventStreamUncompressed::Event::SYNC;
}
inline bool EventStreamUncompressed::Event::Builder::isSync() {
  return which() == EventStreamUncompressed::Event::SYNC;
}
inline typename EventStreamUncompressed::Event::Sync::Reader EventStreamUncompressed::Event::Reader::getSync() const {
  KJ_IREQUIRE((which() == EventStreamUncompressed::Event::SYNC),
              "Must check which() before get()ing a union member.");
  return typename EventStreamUncompressed::Event::Sync::Reader(_reader);
}
inline typename EventStreamUncompressed::Event::Sync::Builder EventStreamUncompressed::Event::Builder::getSync() {
  KJ_IREQUIRE((which() == EventStreamUncompressed::Event::SYNC),
              "Must check which() before get()ing a union member.");
  return typename EventStreamUncompressed::Event::Sync::Builder(_builder);
}
inline typename EventStreamUncompressed::Event::Sync::Builder EventStreamUncompressed::Event::Builder::initSync() {
  _builder.setDataField<EventStreamUncompressed::Event::Which>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, EventStreamUncompressed::Event::SYNC);
  _builder.setDataField< ::uint16_t>(::capnp::bounded<0>() * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint64_t>(::capnp::bounded<1>() * ::capnp::ELEMENTS, 0);
  return typename EventStreamUncompressed::Event::Sync::Builder(_builder);
}
inline bool EventStreamUncompressed::Event::Reader::isMarker() const {
  return which() == EventStreamUncompressed::Event::MARKER;
}
inline bool EventStreamUncompressed::Event::Builder::isMarker() {
  return which() == EventStreamUncompressed::Event::MARKER;
}
inline typename EventStreamUncompressed::Event::Marker::Reader EventStreamUncompressed::Event::Reader::getMarker() const {
  KJ_IREQUIRE((which() == EventStreamUncompressed::Event::MARKER),
              "Must check which() before get()ing a union member.");
  return typename EventStreamUncompressed::Event::Marker::Reader(_reader);
}
inline typename EventStreamUncompressed::Event::Marker::Builder EventStreamUncompressed::Event::Builder::getMarker() {
  KJ_IREQUIRE((which() == EventStreamUncompressed::Event::MARKER),
              "Must check which() before get()ing a union member.");
  return typename EventStreamUncompressed::Event::Marker::Builder(_builder);
}
inline typename EventStreamUncompressed::Event::Marker::Builder EventStreamUncompressed::Event::Builder::initMarker() {
  _builder.setDataField<EventStreamUncompressed::Event::Which>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, EventStreamUncompressed::Event::MARKER);
  _builder.setDataField< ::uint16_t>(::capnp::bounded<0>() * ::capnp::ELEMENTS, 0);
  return typename EventStreamUncompressed::Event::Marker::Builder(_builder);
}
inline  ::uint16_t EventStreamUncompressed::Event::Comp::Reader::getIops() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t EventStreamUncompressed::Event::Comp::Builder::getIops() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void EventStreamUncompressed::Event::Comp::Builder::setIops( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t EventStreamUncompressed::Event::Comp::Reader::getFlops() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t EventStreamUncompressed::Event::Comp::Builder::getFlops() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void EventStreamUncompressed::Event::Comp::Builder::setFlops( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::EventStreamUncompressed::Event::MemType EventStreamUncompressed::Event::Comp::Reader::getMem() const {
  return _reader.getDataField< ::EventStreamUncompressed::Event::MemType>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::EventStreamUncompressed::Event::MemType EventStreamUncompressed::Event::Comp::Builder::getMem() {
  return _builder.getDataField< ::EventStreamUncompressed::Event::MemType>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void EventStreamUncompressed::Event::Comp::Builder::setMem( ::EventStreamUncompressed::Event::MemType value) {
  _builder.setDataField< ::EventStreamUncompressed::Event::MemType>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t EventStreamUncompressed::Event::Comp::Reader::getStartAddr() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t EventStreamUncompressed::Event::Comp::Builder::getStartAddr() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void EventStreamUncompressed::Event::Comp::Builder::setStartAddr( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t EventStreamUncompressed::Event::Comp::Reader::getEndAddr() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t EventStreamUncompressed::Event::Comp::Builder::getEndAddr() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void EventStreamUncompressed::Event::Comp::Builder::setEndAddr( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t EventStreamUncompressed::Event::Comm::Reader::getProducerThread() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t EventStreamUncompressed::Event::Comm::Builder::getProducerThread() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void EventStreamUncompressed::Event::Comm::Builder::setProducerThread( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t EventStreamUncompressed::Event::Comm::Reader::getProducerEvent() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t EventStreamUncompressed::Event::Comm::Builder::getProducerEvent() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void EventStreamUncompressed::Event::Comm::Builder::setProducerEvent( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t EventStreamUncompressed::Event::Comm::Reader::getStartAddr() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t EventStreamUncompressed::Event::Comm::Builder::getStartAddr() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void EventStreamUncompressed::Event::Comm::Builder::setStartAddr( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t EventStreamUncompressed::Event::Comm::Reader::getEndAddr() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t EventStreamUncompressed::Event::Comm::Builder::getEndAddr() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void EventStreamUncompressed::Event::Comm::Builder::setEndAddr( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::EventStreamUncompressed::Event::SyncType EventStreamUncompressed::Event::Sync::Reader::getType() const {
  return _reader.getDataField< ::EventStreamUncompressed::Event::SyncType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::EventStreamUncompressed::Event::SyncType EventStreamUncompressed::Event::Sync::Builder::getType() {
  return _builder.getDataField< ::EventStreamUncompressed::Event::SyncType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void EventStreamUncompressed::Event::Sync::Builder::setType( ::EventStreamUncompressed::Event::SyncType value) {
  _builder.setDataField< ::EventStreamUncompressed::Event::SyncType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t EventStreamUncompressed::Event::Sync::Reader::getId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t EventStreamUncompressed::Event::Sync::Builder::getId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void EventStreamUncompressed::Event::Sync::Builder::setId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t EventStreamUncompressed::Event::Marker::Reader::getCount() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t EventStreamUncompressed::Event::Marker::Builder::getCount() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void EventStreamUncompressed::Event::Marker::Builder::setCount( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}


#endif  // CAPNP_INCLUDED_b9c6524d44427f77_
