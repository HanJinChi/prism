// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: STEventTraceUncompressed.capnp

#include "STEventTraceUncompressed.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<43> b_e8add7b262110ea6 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    166,  14,  17,  98, 178, 215, 173, 232,
     31,   0,   0,   0,   1,   0,   0,   0,
    119, 127,  66,  68,  77,  82, 198, 185,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 186,   1,   0,   0,
     45,   0,   0,   0,  23,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     53,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     83,  84,  69, 118, 101, 110, 116,  84,
    114,  97,  99, 101,  85, 110,  99, 111,
    109, 112, 114, 101, 115, 115, 101, 100,
     46,  99,  97, 112, 110, 112,  58,  69,
    118, 101, 110, 116,  83, 116, 114, 101,
     97, 109,  85, 110,  99, 111, 109, 112,
    114, 101, 115, 115, 101, 100,   0,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
    132, 188, 187, 181, 230,  87, 250, 202,
      1,   0,   0,   0,  50,   0,   0,   0,
     69, 118, 101, 110, 116,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     36,   0,   0,   0,   2,   0,   1,   0,
    101, 118, 101, 110, 116, 115,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    132, 188, 187, 181, 230,  87, 250, 202,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e8add7b262110ea6 = b_e8add7b262110ea6.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e8add7b262110ea6[] = {
  &s_cafa57e6b5bbbc84,
};
static const uint16_t m_e8add7b262110ea6[] = {0};
static const uint16_t i_e8add7b262110ea6[] = {0};
const ::capnp::_::RawSchema s_e8add7b262110ea6 = {
  0xe8add7b262110ea6, b_e8add7b262110ea6.words, 43, d_e8add7b262110ea6, m_e8add7b262110ea6,
  1, 1, i_e8add7b262110ea6, nullptr, nullptr, { &s_e8add7b262110ea6, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<61> b_cafa57e6b5bbbc84 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    132, 188, 187, 181, 230,  87, 250, 202,
     55,   0,   0,   0,   1,   0,   4,   0,
    166,  14,  17,  98, 178, 215, 173, 232,
      0,   0,   7,   0,   0,   0,   4,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 234,   1,   0,   0,
     49,   0,   0,   0,  39,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0, 231,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     83,  84,  69, 118, 101, 110, 116,  84,
    114,  97,  99, 101,  85, 110,  99, 111,
    109, 112, 114, 101, 115, 115, 101, 100,
     46,  99,  97, 112, 110, 112,  58,  69,
    118, 101, 110, 116,  83, 116, 114, 101,
     97, 109,  85, 110,  99, 111, 109, 112,
    114, 101, 115, 115, 101, 100,  46,  69,
    118, 101, 110, 116,   0,   0,   0,   0,
      8,   0,   0,   0,   1,   0,   1,   0,
    157, 227,  14,   5,  78,  58,  38, 181,
      9,   0,   0,   0,  74,   0,   0,   0,
     73, 185, 232, 200, 168,  27,  87, 157,
      9,   0,   0,   0,  66,   0,   0,   0,
     83, 121, 110,  99,  84, 121, 112, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
     77, 101, 109,  84, 121, 112, 101,   0,
     16,   0,   0,   0,   3,   0,   4,   0,
      0,   0, 255, 255,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     98, 200, 152,  11, 170, 226, 152, 248,
     97,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0, 254, 255,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    174, 130,  75,   5,  44,  66, 164, 206,
     73,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0, 253, 255,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     76, 156, 126, 106, 125, 248, 202, 242,
     49,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      3,   0, 252, 255,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     50,  61, 151, 202,  14, 158, 121, 180,
     25,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 109, 112,   0,   0,   0,   0,
     99, 111, 109, 109,   0,   0,   0,   0,
    115, 121, 110,  99,   0,   0,   0,   0,
    109,  97, 114, 107, 101, 114,   0,   0, }
};
::capnp::word const* const bp_cafa57e6b5bbbc84 = b_cafa57e6b5bbbc84.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_cafa57e6b5bbbc84[] = {
  &s_b4799e0eca973d32,
  &s_cea4422c054b82ae,
  &s_f2caf87d6a7e9c4c,
  &s_f898e2aa0b98c862,
};
static const uint16_t m_cafa57e6b5bbbc84[] = {1, 0, 3, 2};
static const uint16_t i_cafa57e6b5bbbc84[] = {0, 1, 2, 3};
const ::capnp::_::RawSchema s_cafa57e6b5bbbc84 = {
  0xcafa57e6b5bbbc84, b_cafa57e6b5bbbc84.words, 61, d_cafa57e6b5bbbc84, m_cafa57e6b5bbbc84,
  4, 4, i_cafa57e6b5bbbc84, nullptr, nullptr, { &s_cafa57e6b5bbbc84, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<72> b_b5263a4e050ee39d = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    157, 227,  14,   5,  78,  58,  38, 181,
     61,   0,   0,   0,   2,   0,   0,   0,
    132, 188, 187, 181, 230,  87, 250, 202,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  50,   2,   0,   0,
     53,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,  15,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     83,  84,  69, 118, 101, 110, 116,  84,
    114,  97,  99, 101,  85, 110,  99, 111,
    109, 112, 114, 101, 115, 115, 101, 100,
     46,  99,  97, 112, 110, 112,  58,  69,
    118, 101, 110, 116,  83, 116, 114, 101,
     97, 109,  85, 110,  99, 111, 109, 112,
    114, 101, 115, 115, 101, 100,  46,  69,
    118, 101, 110, 116,  46,  83, 121, 110,
     99,  84, 121, 112, 101,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     44,   0,   0,   0,   1,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    125,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    117,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
    109,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
    101,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
     93,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
     85,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
     65,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
     61,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 112,  97, 119, 110,   0,   0,   0,
    106, 111, 105, 110,   0,   0,   0,   0,
     98,  97, 114, 114, 105, 101, 114,   0,
    115, 121, 110,  99,   0,   0,   0,   0,
    108, 111,  99, 107,   0,   0,   0,   0,
    117, 110, 108, 111,  99, 107,   0,   0,
     99, 111, 110, 100,  87,  97, 105, 116,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 110, 100,  83, 105, 103, 110,
     97, 108,   0,   0,   0,   0,   0,   0,
     99, 111, 110, 100,  66, 114, 111,  97,
    100,  99,  97, 115, 116,   0,   0,   0,
    115, 112, 105, 110,  76, 111,  99, 107,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 112, 105, 110,  85, 110, 108, 111,
     99, 107,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b5263a4e050ee39d = b_b5263a4e050ee39d.words;
#if !CAPNP_LITE
static const uint16_t m_b5263a4e050ee39d[] = {2, 8, 7, 6, 1, 4, 0, 9, 10, 3, 5};
const ::capnp::_::RawSchema s_b5263a4e050ee39d = {
  0xb5263a4e050ee39d, b_b5263a4e050ee39d.words, 72, nullptr, m_b5263a4e050ee39d,
  0, 11, nullptr, nullptr, nullptr, { &s_b5263a4e050ee39d, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
CAPNP_DEFINE_ENUM(SyncType_b5263a4e050ee39d, b5263a4e050ee39d);
static const ::capnp::_::AlignedData<35> b_9d571ba8c8e8b949 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     73, 185, 232, 200, 168,  27,  87, 157,
     61,   0,   0,   0,   2,   0,   0,   0,
    132, 188, 187, 181, 230,  87, 250, 202,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  42,   2,   0,   0,
     53,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,  79,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     83,  84,  69, 118, 101, 110, 116,  84,
    114,  97,  99, 101,  85, 110,  99, 111,
    109, 112, 114, 101, 115, 115, 101, 100,
     46,  99,  97, 112, 110, 112,  58,  69,
    118, 101, 110, 116,  83, 116, 114, 101,
     97, 109,  85, 110,  99, 111, 109, 112,
    114, 101, 115, 115, 101, 100,  46,  69,
    118, 101, 110, 116,  46,  77, 101, 109,
     84, 121, 112, 101,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   1,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110, 111, 110, 101,   0,   0,   0,   0,
    114, 101,  97, 100,   0,   0,   0,   0,
    119, 114, 105, 116, 101,   0,   0,   0, }
};
::capnp::word const* const bp_9d571ba8c8e8b949 = b_9d571ba8c8e8b949.words;
#if !CAPNP_LITE
static const uint16_t m_9d571ba8c8e8b949[] = {0, 1, 2};
const ::capnp::_::RawSchema s_9d571ba8c8e8b949 = {
  0x9d571ba8c8e8b949, b_9d571ba8c8e8b949.words, 35, nullptr, m_9d571ba8c8e8b949,
  0, 3, nullptr, nullptr, nullptr, { &s_9d571ba8c8e8b949, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
CAPNP_DEFINE_ENUM(MemType_9d571ba8c8e8b949, 9d571ba8c8e8b949);
static const ::capnp::_::AlignedData<98> b_f898e2aa0b98c862 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     98, 200, 152,  11, 170, 226, 152, 248,
     61,   0,   0,   0,   1,   0,   4,   0,
    132, 188, 187, 181, 230,  87, 250, 202,
      0,   0,   7,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  18,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  31,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     83,  84,  69, 118, 101, 110, 116,  84,
    114,  97,  99, 101,  85, 110,  99, 111,
    109, 112, 114, 101, 115, 115, 101, 100,
     46,  99,  97, 112, 110, 112,  58,  69,
    118, 101, 110, 116,  83, 116, 114, 101,
     97, 109,  85, 110,  99, 111, 109, 112,
    114, 101, 115, 115, 101, 100,  46,  69,
    118, 101, 110, 116,  46,  99, 111, 109,
    112,   0,   0,   0,   0,   0,   0,   0,
     20,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    125,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    120,   0,   0,   0,   3,   0,   1,   0,
    132,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    129,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    124,   0,   0,   0,   3,   0,   1,   0,
    136,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    133,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    128,   0,   0,   0,   3,   0,   1,   0,
    140,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    137,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    136,   0,   0,   0,   3,   0,   1,   0,
    148,   0,   0,   0,   2,   0,   1,   0,
      4,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    145,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    140,   0,   0,   0,   3,   0,   1,   0,
    152,   0,   0,   0,   2,   0,   1,   0,
    105, 111, 112, 115,   0,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102, 108, 111, 112, 115,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109, 101, 109,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
     73, 185, 232, 200, 168,  27,  87, 157,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116,  97, 114, 116,  65, 100, 100,
    114,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101, 110, 100,  65, 100, 100, 114,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f898e2aa0b98c862 = b_f898e2aa0b98c862.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_f898e2aa0b98c862[] = {
  &s_9d571ba8c8e8b949,
  &s_cafa57e6b5bbbc84,
};
static const uint16_t m_f898e2aa0b98c862[] = {4, 1, 0, 2, 3};
static const uint16_t i_f898e2aa0b98c862[] = {0, 1, 2, 3, 4};
const ::capnp::_::RawSchema s_f898e2aa0b98c862 = {
  0xf898e2aa0b98c862, b_f898e2aa0b98c862.words, 98, d_f898e2aa0b98c862, m_f898e2aa0b98c862,
  2, 5, i_f898e2aa0b98c862, nullptr, nullptr, { &s_f898e2aa0b98c862, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<85> b_cea4422c054b82ae = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    174, 130,  75,   5,  44,  66, 164, 206,
     61,   0,   0,   0,   1,   0,   4,   0,
    132, 188, 187, 181, 230,  87, 250, 202,
      0,   0,   7,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  18,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0, 231,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     83,  84,  69, 118, 101, 110, 116,  84,
    114,  97,  99, 101,  85, 110,  99, 111,
    109, 112, 114, 101, 115, 115, 101, 100,
     46,  99,  97, 112, 110, 112,  58,  69,
    118, 101, 110, 116,  83, 116, 114, 101,
     97, 109,  85, 110,  99, 111, 109, 112,
    114, 101, 115, 115, 101, 100,  46,  69,
    118, 101, 110, 116,  46,  99, 111, 109,
    109,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   5,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     96,   0,   0,   0,   3,   0,   1,   0,
    108,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   6,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105,   0,   0,   0, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104,   0,   0,   0,   3,   0,   1,   0,
    116,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    113,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,   0,   0,   0,   3,   0,   1,   0,
    124,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   8,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    121,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116,   0,   0,   0,   3,   0,   1,   0,
    128,   0,   0,   0,   2,   0,   1,   0,
    112, 114, 111, 100, 117,  99, 101, 114,
     84, 104, 114, 101,  97, 100,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112, 114, 111, 100, 117,  99, 101, 114,
     69, 118, 101, 110, 116,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116,  97, 114, 116,  65, 100, 100,
    114,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101, 110, 100,  65, 100, 100, 114,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_cea4422c054b82ae = b_cea4422c054b82ae.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_cea4422c054b82ae[] = {
  &s_cafa57e6b5bbbc84,
};
static const uint16_t m_cea4422c054b82ae[] = {3, 1, 0, 2};
static const uint16_t i_cea4422c054b82ae[] = {0, 1, 2, 3};
const ::capnp::_::RawSchema s_cea4422c054b82ae = {
  0xcea4422c054b82ae, b_cea4422c054b82ae.words, 85, d_cea4422c054b82ae, m_cea4422c054b82ae,
  1, 4, i_cea4422c054b82ae, nullptr, nullptr, { &s_cea4422c054b82ae, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<52> b_f2caf87d6a7e9c4c = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     76, 156, 126, 106, 125, 248, 202, 242,
     61,   0,   0,   0,   1,   0,   4,   0,
    132, 188, 187, 181, 230,  87, 250, 202,
      0,   0,   7,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  18,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     83,  84,  69, 118, 101, 110, 116,  84,
    114,  97,  99, 101,  85, 110,  99, 111,
    109, 112, 114, 101, 115, 115, 101, 100,
     46,  99,  97, 112, 110, 112,  58,  69,
    118, 101, 110, 116,  83, 116, 114, 101,
     97, 109,  85, 110,  99, 111, 109, 112,
    114, 101, 115, 115, 101, 100,  46,  69,
    118, 101, 110, 116,  46, 115, 121, 110,
     99,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   9,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,  10,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    116, 121, 112, 101,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
    157, 227,  14,   5,  78,  58,  38, 181,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 100,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f2caf87d6a7e9c4c = b_f2caf87d6a7e9c4c.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_f2caf87d6a7e9c4c[] = {
  &s_b5263a4e050ee39d,
  &s_cafa57e6b5bbbc84,
};
static const uint16_t m_f2caf87d6a7e9c4c[] = {1, 0};
static const uint16_t i_f2caf87d6a7e9c4c[] = {0, 1};
const ::capnp::_::RawSchema s_f2caf87d6a7e9c4c = {
  0xf2caf87d6a7e9c4c, b_f2caf87d6a7e9c4c.words, 52, d_f2caf87d6a7e9c4c, m_f2caf87d6a7e9c4c,
  2, 2, i_f2caf87d6a7e9c4c, nullptr, nullptr, { &s_f2caf87d6a7e9c4c, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<37> b_b4799e0eca973d32 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     50,  61, 151, 202,  14, 158, 121, 180,
     61,   0,   0,   0,   1,   0,   4,   0,
    132, 188, 187, 181, 230,  87, 250, 202,
      0,   0,   7,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  34,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     83,  84,  69, 118, 101, 110, 116,  84,
    114,  97,  99, 101,  85, 110,  99, 111,
    109, 112, 114, 101, 115, 115, 101, 100,
     46,  99,  97, 112, 110, 112,  58,  69,
    118, 101, 110, 116,  83, 116, 114, 101,
     97, 109,  85, 110,  99, 111, 109, 112,
    114, 101, 115, 115, 101, 100,  46,  69,
    118, 101, 110, 116,  46, 109,  97, 114,
    107, 101, 114,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,  11,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 117, 110, 116,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b4799e0eca973d32 = b_b4799e0eca973d32.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_b4799e0eca973d32[] = {
  &s_cafa57e6b5bbbc84,
};
static const uint16_t m_b4799e0eca973d32[] = {0};
static const uint16_t i_b4799e0eca973d32[] = {0};
const ::capnp::_::RawSchema s_b4799e0eca973d32 = {
  0xb4799e0eca973d32, b_b4799e0eca973d32.words, 37, d_b4799e0eca973d32, m_b4799e0eca973d32,
  1, 1, i_b4799e0eca973d32, nullptr, nullptr, { &s_b4799e0eca973d32, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================


// EventStreamUncompressed
#ifndef _MSC_VER
constexpr uint16_t EventStreamUncompressed::_capnpPrivate::dataWordSize;
constexpr uint16_t EventStreamUncompressed::_capnpPrivate::pointerCount;
#endif
#if !CAPNP_LITE
constexpr ::capnp::Kind EventStreamUncompressed::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* EventStreamUncompressed::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* EventStreamUncompressed::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// EventStreamUncompressed::Event
#ifndef _MSC_VER
constexpr uint16_t EventStreamUncompressed::Event::_capnpPrivate::dataWordSize;
constexpr uint16_t EventStreamUncompressed::Event::_capnpPrivate::pointerCount;
#endif
#if !CAPNP_LITE
constexpr ::capnp::Kind EventStreamUncompressed::Event::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* EventStreamUncompressed::Event::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* EventStreamUncompressed::Event::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// EventStreamUncompressed::Event::Comp
#ifndef _MSC_VER
constexpr uint16_t EventStreamUncompressed::Event::Comp::_capnpPrivate::dataWordSize;
constexpr uint16_t EventStreamUncompressed::Event::Comp::_capnpPrivate::pointerCount;
#endif
#if !CAPNP_LITE
constexpr ::capnp::Kind EventStreamUncompressed::Event::Comp::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* EventStreamUncompressed::Event::Comp::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* EventStreamUncompressed::Event::Comp::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// EventStreamUncompressed::Event::Comm
#ifndef _MSC_VER
constexpr uint16_t EventStreamUncompressed::Event::Comm::_capnpPrivate::dataWordSize;
constexpr uint16_t EventStreamUncompressed::Event::Comm::_capnpPrivate::pointerCount;
#endif
#if !CAPNP_LITE
constexpr ::capnp::Kind EventStreamUncompressed::Event::Comm::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* EventStreamUncompressed::Event::Comm::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* EventStreamUncompressed::Event::Comm::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// EventStreamUncompressed::Event::Sync
#ifndef _MSC_VER
constexpr uint16_t EventStreamUncompressed::Event::Sync::_capnpPrivate::dataWordSize;
constexpr uint16_t EventStreamUncompressed::Event::Sync::_capnpPrivate::pointerCount;
#endif
#if !CAPNP_LITE
constexpr ::capnp::Kind EventStreamUncompressed::Event::Sync::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* EventStreamUncompressed::Event::Sync::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* EventStreamUncompressed::Event::Sync::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// EventStreamUncompressed::Event::Marker
#ifndef _MSC_VER
constexpr uint16_t EventStreamUncompressed::Event::Marker::_capnpPrivate::dataWordSize;
constexpr uint16_t EventStreamUncompressed::Event::Marker::_capnpPrivate::pointerCount;
#endif
#if !CAPNP_LITE
constexpr ::capnp::Kind EventStreamUncompressed::Event::Marker::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* EventStreamUncompressed::Event::Marker::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* EventStreamUncompressed::Event::Marker::_capnpPrivate::brand;
#endif  // !CAPNP_LITE



